{"version":3,"sources":["Components/Card/Presentational/Card.tsx","Util/Utils.js","Components/StatisticPanel/Presentational/StatisticPanel.tsx","Components/StatisticPanel/Container/StatisticPanel.js","Components/GameEndDialog/GameEndDialog.tsx","Components/Board/Presentational/Board.js","Actions/ActionTypes.tsx","Actions/ActionCreator.tsx","Components/Board/Container/Board.tsx","Reducers/index.js","Store/Store.tsx","Components/Appbar/Appbar.tsx","Components/ControlPanel/Presentational/ControlPanel.js","Components/ControlPanel/Container/ControlPanel.js","Components/SummaryPanel/Presentational/SummaryPanel.tsx","Components/SummaryPanel/Container/SummaryPanel.tsx","Components/WelcomeDialog/WelcomeDialog.tsx","App.tsx","index.tsx"],"names":["css","CardBody","card","this","props","suit","number","react_default","a","createElement","Card_default","className","getCrad","Component","PrepareCards","decks","base","cards","oneDeck","i","length","j","push","d","concat","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","Shuffle","GetCardsSum","flipAce","sum","map","parseInt","reduce","b","containAce","GetRoundResult","dealerSum","playerSum","StatisticPanel","_this$props","dealerWinCount","playerWinCount","tieCount","remainingCards","endShoeSummary","panelContent","Typography_default","variant","color","endGamePanelContent","Paper_default","elevation","StatisticPanelContainer","connect","state","ownProps","Object","objectSpread","statistic","dispatch","GameEndDialog","open","onReloadCardsClick","Dialog_default","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","Container_StatisticPanel","DialogActions_default","Fab_default","onClick","aria-label","Board","dealerCards","playerCards","onCalculateRoundResult","onUpdateStatistic","startGame","Card_Presentational_Card","key","_this$props2","ReloadCards","shoeEnd","Components_GameEndDialog_GameEndDialog","ReloadShoe","bind","CreateDealerCards","CreatePlayerCards","actionType","loadCards","type","ActionType","payload","drawDealerCard","shift","drawPlayerCard","resetRoundEnd","roundEnd","result","resetStatistic","boardBody","console","log","dealerCardsSum","playerCardsSum","roundResult","updateStatistic","Reducers","combineReducers","arguments","undefined","action","assign","_action$payload","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","Appbar","AppBar_default","position","Toolbar_default","role","Button_default","openGithubPage","Code_default","ControlPanel","loadCardsClick","startGameClick","playerHitClick","playerStandClick","Grid_default","item","xs","BottomNavigation_default","showLabels","BottomNavigationAction_default","label","classes","icon","PlayArrow_default","Check_default","Stop_default","Restore_default","ControlPanelContainer","playerHit","playerStand","total","nextDealerCard","dealerDrawToSeventeen","stateProps","dispatchProps","SummaryPanel","displayStyle","playerTotal","dealerTotal","style","summaryPanelContainer","playSumResult","display","WelcomeDialog","onStartGameClick","gutterBottom","Link_default","inline","href","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","init","blackJackSimulator","Container_Board","Container_SummaryPanel","Container_ControlPanel","es","store","Store","Components_Appbar_Appbar","Components_WelcomeDialog_WelcomeDialog","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.abe16431.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport './Card.css';\n\ninterface CradProps {\n    card: {\n        suit: String,\n        number: String\n    };\n}\n\nconst css = {\n    cardBody: 'card-body',\n    card: 'card'\n};\n\nclass CardBody extends Component<CradProps, {}> {\n\n    getCrad() {\n        const { card } = this.props;\n        return css.card + ' ' + card.suit + card.number;\n    }\n\n    render() {\n        return (\n            <Card className={css.cardBody}>\n                <div className={this.getCrad()}></div>\n            </Card>\n        );\n    }\n}\n\nexport default CardBody;","// Shuffle an array: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nconst Shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nconst PrepareCards = (decks) => {\n    const base = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n    const suit = ['C', 'D', 'H', 'S'];\n    var cards = [];\n    var oneDeck = [];\n\n    for (var i = 0; i< base.length; i++) {\n        for (var j = 0; j< suit.length; j++) {\n            oneDeck.push({\n                number: base[i],\n                suit: suit[j]\n            });\n        }\n    }\n\n    for (var d = 0; d < decks; d++) {\n        cards = cards.concat(oneDeck)\n    }\n\n    return Shuffle(cards)\n}\n\nconst GetCardsSum = (cards) => {\n    var flipAce = false;\n\n    cards = cards.map((card) => card.number);\n    cards = cards.map((card) => {\n        switch (card) {\n            case 'A':\n                if (flipAce) {\n                    return 1;\n                }\n                flipAce = true;\n                return 11;\n            case 'J':\n            case 'Q':\n            case 'K':\n                return 10;\n            default:\n                return parseInt(card, 10);\n        }\n    });\n\n    var sum = cards.reduce((a, b) => a + b, 0);\n    if (flipAce && sum > 21) {\n        sum -= 10;\n        return {\n            sum: sum,\n            containAce: false\n        }\n    }\n\n    return {\n        sum: sum,\n        containAce: flipAce\n    }\n}\n\nconst GetRoundResult = (dealerSum, playerSum) => {\n    var result = '';\n\n    if (playerSum > 21 || (dealerSum === 21 && playerSum !== 21)) {\n        result = 'Dealer Wins';\n    } else if (dealerSum > 21 || (playerSum === 21 && dealerSum !== 21)) {\n        result = 'Player Wins';\n    } else {\n        if (playerSum < dealerSum) {\n            result = 'Dealer Wins';\n        } else if (playerSum > dealerSum) {\n            result = 'Player Wins';\n        } else {\n            result = 'Tie'\n        }\n    }\n\n    return result;\n}\n\nexport { PrepareCards, GetCardsSum, GetRoundResult };\n","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport './StatisticPanel.css';\n\nexport interface StatisticPanelProps {\n    dealerWinCount: Number;\n    playerWinCount: Number;\n    tieCount: Number;\n    remainingCards: String;\n    endShoeSummary: boolean;\n}\n\nconst css = {\n    statisticPanelBody: 'statistic-panel-body',\n    endShoeStatisticPanelBody: 'end-shoe-statistic-panel-body',\n    statisticPanelTitle: 'statistic-panel-title'\n};\n\nclass StatisticPanel extends Component<StatisticPanelProps, {}> {\n    render() {\n        const { dealerWinCount, playerWinCount, tieCount, remainingCards, endShoeSummary } = this.props;\n        const panelContent = (\n            <div>\n                <Typography className={css.statisticPanelTitle} variant='title' color='inherit'>\n                    Game Statistic:\n                </Typography>\n                <Typography className={css.statisticPanelTitle} variant='caption' color='inherit'>\n                    (Data will be updated at the end of each round)\n                </Typography>\n            </div>\n        );\n        const endGamePanelContent = (\n            <div>\n                <Typography className={css.statisticPanelTitle} variant='title' color='inherit'>\n                    End Shoe Statistic:\n                </Typography>\n            </div>\n        );\n        return (\n            <div>\n                <Paper className={endShoeSummary ? css.endShoeStatisticPanelBody : css.statisticPanelBody} elevation={3}>\n                    <div>\n                        {endShoeSummary ? endGamePanelContent : panelContent}\n                        <p>Dealer win count: {dealerWinCount}</p>\n                        <p>Player win count: {playerWinCount}</p>\n                        <p>Tie count: {tieCount}</p>\n                        {endShoeSummary ? '' : (<p>Remaining cards: {remainingCards}</p>)}\n\n                    </div>\n                </Paper>\n            </div>\n        );\n    }\n}\n\nexport default StatisticPanel;","import { connect } from 'react-redux';\nimport StatisticPanel from '../Presentational/StatisticPanel';\n\nconst mapStateToProps = (state, ownProps) => ({\n    ...ownProps,\n    ...state.statistic\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n})\n\nconst StatisticPanelContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(StatisticPanel)\n\nexport default StatisticPanelContainer;\n\n","import React, { Component, MouseEventHandler } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Fab from '@material-ui/core/Fab';\nimport StatisticPanelContainer from '../StatisticPanel/Container/StatisticPanel.js';\nimport './GameEndDialog.css';\n\ninterface GameEndDialogProps {\n    open: boolean;\n    onReloadCardsClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nconst css = {\n    dialog: 'dialog',\n    title: 'title',\n    content: 'content',\n    subheader: 'sub-header',\n    howToPlaySection: 'how-to-play-section',\n    startButton: 'start-button'\n};\n\nclass GameEndDialog extends Component<GameEndDialogProps, {}> {\n\n    render() {\n        const {open, onReloadCardsClick} = this.props;\n\n        return (\n            <div>\n                <Dialog\n                    onClose={onReloadCardsClick}\n                    aria-labelledby='customized-dialog-title'\n                    open={open}\n                    className={css.dialog}\n                    >\n                    <DialogTitle className={css.title}>\n                        No more cards\n                    </DialogTitle>\n                    <DialogContent className={css.content}>\n                        <StatisticPanelContainer endShoeSummary={true}></StatisticPanelContainer>\n                    </DialogContent>\n                    <DialogActions className={css.startButton}>\n                    <Fab variant='extended' onClick={onReloadCardsClick} color='primary' aria-label='Add'>\n                    Start a new shoe\n                    </Fab>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default GameEndDialog;","import React, { Component } from 'react';\nimport Card from '../../Card/Presentational/Card';\nimport { GetCardsSum } from '../../../Util/Utils';\nimport GameEndDialog from '../../GameEndDialog/GameEndDialog';\nimport './Board.css';\n\nconst css = {\n    dealerPanel: 'dealer-panel',\n    playerPanel: 'player-panel',\n    boardWrapper: 'board-wrapper'\n}\n\nclass Board extends Component {\n\n    // TODO: startGame should be called in componentDidMount\n    //       Need to figure out how to delay this call once cards finish loading\n    componentDidUpdate() {\n        const { dealerCards, playerCards, onCalculateRoundResult, onUpdateStatistic, cards, startGame } = this.props;\n\n        if (dealerCards.length === 0 && playerCards.length === 0) {\n            return startGame(cards);\n        }\n\n        const playerSum = GetCardsSum(playerCards).sum;\n        const dealerSum = GetCardsSum(dealerCards).sum;\n\n        if (dealerCards.length !== 1 || playerSum > 21 || (playerSum === 21 && playerCards.length === 2)) {\n            onCalculateRoundResult(dealerSum, playerSum);\n            onUpdateStatistic(dealerSum, playerSum, cards)\n        }\n    }\n\n    CreateDealerCards() {\n        const { dealerCards } = this.props;\n        return dealerCards.map((card) => <Card key={card.number + Math.random()} card={card}></Card>)\n    }\n\n    CreatePlayerCards() {\n        const { playerCards } = this.props;\n        return playerCards.map((card) => <Card key={card.number + Math.random()} card={card}></Card>)\n    }\n\n    ReloadShoe() {\n        const { ReloadCards, cards} = this.props;\n        ReloadCards(cards);\n    }\n\n    render() {\n        const {shoeEnd} = this.props;\n        if (shoeEnd) {\n            return <GameEndDialog open={true} onReloadCardsClick={this.ReloadShoe.bind(this)}></GameEndDialog>;\n        }\n        return (\n            <div className={css.boardWrapper}>\n                <div className={css.dealerPanel}>\n                    {this.CreateDealerCards()}\n                </div>\n                <div className={css.playerPanel}>\n                    {this.CreatePlayerCards()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","export interface Action {\n    type: string;\n    payload: any;\n}\n\nexport const actionType = {\n    loadCards: 'LOAD_CARDS',\n    addDealerCard: 'ADD_DEALER_CARD',\n    resetCards: 'REST_CARDS',\n    addPlayerCard: 'ADD_PLAYER_CARD',\n    dealerDrawToSeventeen: 'DEALER_DRAW_TO_SEVENTEEN',\n    calculateRoundResult: 'CALCULATE_ROUND_RESULT',\n    resetRoundResult: 'RESET_ROUND_RESULT',\n    updateStatistic: 'CALCULATE_STATISTIC',\n    resetStatistic: 'RESET_STATISTIC',\n    resetRoundEnd: 'RESET_ROUND_END'\n};\n","import { Action, actionType as ActionType } from './ActionTypes';\nimport { GetCardsSum, GetRoundResult, PrepareCards } from '../Util/Utils';\n\n\nconst loadCards = (): Action => {\n    const decks = 6; // TODO: make this configurable\n\n    return {\n        type: ActionType.loadCards,\n        payload: PrepareCards(decks)\n    };\n};\n\nconst resetCards = (): Action => {\n    return {\n        type: ActionType.resetCards,\n        payload: []\n    };\n};\n\nconst drawDealerCard = (cards: object[]): Action => {\n    return {\n        type: ActionType.addDealerCard,\n        payload: {\n            card: [cards.shift()],\n        }\n    };\n};\n\nconst drawPlayerCard = (cards: object[]): Action => {\n    return {\n        type: ActionType.addPlayerCard,\n        payload: {\n            card: [cards.shift()],\n        }\n    };\n};\n\nconst dealerDrawToSeventeen = (cards: object[], dealerCards: object[]): Action => {\n    let total = 0;\n\n    while (total < 17 && cards.length > 0) {\n        const nextDealerCard = cards.shift();\n        dealerCards = dealerCards.concat([nextDealerCard]);\n        total = GetCardsSum(dealerCards).sum;\n    }\n\n    return {\n        type: ActionType.dealerDrawToSeventeen,\n        payload: {\n            cards: dealerCards,\n        }\n    };\n};\n\nconst calculateRoundResult = (dealerSum: number, playerSum: number): Action => {\n    return {\n        type: ActionType.calculateRoundResult,\n        payload: {\n            roundEnd: true,\n            result: dealerSum === 0 ? '' : GetRoundResult(dealerSum, playerSum)\n        }\n    };\n};\n\nconst resetRoundEnd = (): Action => {\n    return {\n        type: ActionType.resetRoundEnd,\n        payload: {\n            roundEnd: false,\n            result: ''\n        }\n    };\n};\n\nconst updateStatistic = (dealerSum: number, playerSum: number, cards: number[]): Action => {\n    return {\n        type: ActionType.updateStatistic,\n        payload: {\n            roundResult: dealerSum === 0 ? '' : GetRoundResult(dealerSum, playerSum),\n            remainingCards: cards.length\n        }\n    };\n};\n\nconst resetStatistic = (cards: number[]): Action => {\n    return {\n        type: ActionType.resetStatistic,\n        payload: {\n            remainingCards: cards.length\n        }\n    };\n};\n\nconst resetSummary = (): Action => {\n    return {\n        type: ActionType.resetRoundResult,\n        payload: {\n            roundEnd: false,\n            result: ''\n        }\n    };\n};\n\nexport {\n    loadCards,\n    resetCards,\n    drawDealerCard,\n    drawPlayerCard,\n    dealerDrawToSeventeen,\n    calculateRoundResult,\n    resetSummary,\n    updateStatistic,\n    resetStatistic,\n    resetRoundEnd\n};\n","import { connect } from 'react-redux';\nimport Board from '../Presentational/Board.js';\nimport { calculateRoundResult, updateStatistic, drawDealerCard, drawPlayerCard, loadCards, resetStatistic, resetRoundEnd } from '../../../Actions/ActionCreator';\nimport AppState from '../../../Interface/State';\n\nconst mapStateToProps = (state: AppState, ownProps: Object) => {\n    console.log(state);\n    return {\n        ...ownProps,\n        dealerCards: state.dealerCards,\n        playerCards: state.playerCards,\n        cards: state.cards,\n        shoeEnd: state.cards.length === 0 ? true : false\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Function, ownProps: Object) => ({\n    onCalculateRoundResult: (dealerCardsSum: number, playerCardsSum: number) => dispatch(calculateRoundResult(dealerCardsSum, playerCardsSum)),\n    onUpdateStatistic: (dealerCardsSum: number, playerCardsSum: number, cards: number[]) => dispatch(updateStatistic(dealerCardsSum, playerCardsSum, cards)),\n    startGame: (cards: any) => { // TODO: Fix type\n        // Dealer draws 1 card\n        dispatch(drawDealerCard(cards));\n\n        // Player draws 2 cards\n        dispatch(drawPlayerCard(cards));\n        dispatch(drawPlayerCard(cards));\n    },\n    ReloadCards: (cards: any) => {\n        dispatch(loadCards());\n        dispatch(resetStatistic(cards));\n        dispatch(resetRoundEnd());\n    }\n});\n\nconst boardBody = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Board);\n\nexport default boardBody;\n\n","import { combineReducers } from \"redux\";\nimport { actionType as ActionType } from '../Actions/ActionTypes';\n\nconst cards = (state = [], action) => {\n    switch (action.type) {\n        case ActionType.loadCards:\n            return action.payload\n        case ActionType.addDealerCard:\n        case ActionType.addPlayerCard:\n        case ActionType.dealerDrawToSeventeen:\n            return state;\n        default:\n            return state;\n    }\n}\n\nconst dealerCards = (state = [], action) => {\n    switch (action.type) {\n        case ActionType.addDealerCard:\n            return state.concat(action.payload.card)\n        case ActionType.resetCards:\n            return action.payload\n        case ActionType.loadCards:\n            return []\n        case ActionType.dealerDrawToSeventeen:\n            return action.payload.cards\n        default:\n            return state\n    }\n}\n\nconst playerCards = (state = [], action) => {\n    switch (action.type) {\n        case ActionType.addPlayerCard:\n            return state.concat(action.payload.card)\n        case ActionType.resetCards:\n            return action.payload\n        case ActionType.loadCards:\n            return []\n        default:\n            return state\n    }\n}\n\nconst roundResult = (state = { roundEnd: false, result: '' }, action) => {\n    switch (action.type) {\n        case ActionType.calculateRoundResult:\n            return Object.assign({}, action.payload)\n        case ActionType.resetRoundResult:\n            return Object.assign({}, action.payload)\n        default:\n            return state\n    }\n}\n\nconst statistic = (state = { dealerWinCount: 0, playerWinCount: 0, tieCount: 0, remainingCards: 0 }, action) => {\n    switch (action.type) {\n        case ActionType.updateStatistic:\n            var { roundResult, remainingCards } = action.payload;\n            return {\n                dealerWinCount: roundResult === 'Dealer Wins' ? ++state.dealerWinCount : state.dealerWinCount,\n                playerWinCount: roundResult === 'Player Wins' ? ++state.playerWinCount : state.playerWinCount,\n                tieCount: roundResult === 'Tie' ? ++state.tieCount : state.tieCount,\n                remainingCards: remainingCards\n            };\n        case ActionType.resetStatistic:\n            return {\n                dealerWinCount: 0,\n                playerWinCount: 0,\n                tieCount: 0,\n                remainingCards: action.payload.remainingCards\n            }\n        default:\n            return state\n    }\n}\n\nconst Reducers = combineReducers({\n    cards,\n    dealerCards,\n    playerCards,\n    roundResult,\n    statistic\n});\n\nexport default Reducers;\n","import Reducers from '../Reducers/index.js';\nimport thunk from 'redux-thunk';\nimport { createStore, compose, applyMiddleware } from 'redux';\n\ndeclare global {\n    interface Window { __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any; }\n}\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(\n    Reducers,\n    composeEnhancer(applyMiddleware(thunk))\n);\n","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CodeIcon from '@material-ui/icons/Code';\nimport Button from '@material-ui/core/Button';\nimport './Appbar.css';\n\nconst css = {\n    headerCls: 'app-header',\n    headerFont: 'header-font',\n    viewSouceCode: 'view-source-code'\n};\n\nclass Appbar extends Component {\n\n    openGithubPage(): void {\n        const homeUrl = 'https://github.com/waynezhang1995/Blackjack-Simulator';\n        window.open(homeUrl, '_blank');\n    }\n\n    render() {\n        return (\n            <AppBar className={css.headerCls} position='static' color='primary' elevation={3}>\n                <Toolbar>\n                    <Typography variant='title' className={css.headerFont} color='inherit'>\n                        <span role='img' aria-label='poker'>♠️</span> Blackjack Simulator <span role='img' aria-label='poker'>♥️</span>\n                    </Typography>\n                    <Button onClick={this.openGithubPage} variant='contained' color='primary' className={css.viewSouceCode}>\n                        View Source Code\n                        <CodeIcon />\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        );\n    }\n}\n\nexport default Appbar;\n\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport CheckIcon from '@material-ui/icons/Check';\nimport StopIcon from '@material-ui/icons/Stop';\nimport \"./ControlPanel.css\"\n\nconst css = {\n    controlPanel: 'control-panel',\n    buttonColor: 'button-color',\n    labelFont: 'label-font',\n    buttonPlay: 'button-play',\n    buttonHit: 'button-hit',\n    buttonStand: 'button-stand',\n    buttonReload: 'button-reload',\n    buttonDisabled: 'button-disabled',\n    controlPanelBody: 'control-panel-body'\n};\n\nclass ControlPanel extends Component {\n\n    componentDidMount() {\n        const { loadCards, cards } = this.props;\n        loadCards(cards);\n    }\n\n    render() {\n        const { loadCardsClick, startGameClick, playerHitClick, playerStandClick, roundResult } = this.props;\n        const roundEnd = roundResult.roundEnd;\n        return (\n            <Grid item xs={12} className={css.controlPanel}>\n                <BottomNavigation className={css.controlPanelBody} showLabels>\n                    <BottomNavigationAction className={roundEnd ? '' : css.buttonDisabled} onClick={startGameClick} label=\"Next Game\" classes={{ label: css.labelFont }} icon={<PlayArrowIcon className={css.buttonPlay} />} />\n                    <BottomNavigationAction className={roundEnd ? css.buttonDisabled : ''} onClick={playerHitClick} label=\"Hit\" classes={{ label: css.labelFont }} icon={<CheckIcon className={css.buttonHit} />} />\n                    <BottomNavigationAction className={roundEnd ? css.buttonDisabled : ''} onClick={playerStandClick} label=\"Stand\" classes={{ label: css.labelFont }} icon={<StopIcon className={css.buttonStand} />} />\n                    <BottomNavigationAction onClick={loadCardsClick} label=\"Reload\" classes={{ label: css.labelFont }} icon={<RestoreIcon className={css.buttonReload} />} />\n                </BottomNavigation>\n            </Grid>\n        );\n    }\n}\n\nexport default ControlPanel;","import { connect } from 'react-redux';\nimport ControlPanel from '../Presentational/ControlPanel.js';\nimport {\n    loadCards,\n    resetCards,\n    drawDealerCard,\n    drawPlayerCard,\n    dealerDrawToSeventeen,\n    resetSummary,\n    resetStatistic,\n    resetRoundEnd\n} from '../../../Actions/ActionCreator';\n\nconst mapStateToProps = (state, ownProps) => ({\n    ...ownProps,\n    ...state\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        loadCards: (cards) => {\n            dispatch(loadCards());\n            dispatch(resetStatistic(cards));\n            dispatch(resetRoundEnd())\n        },\n        startGame: (cards) => {\n            dispatch(resetCards());\n\n            // Dealer draws 1 card\n            dispatch(drawDealerCard(cards));\n\n            // Player draws 2 cards\n            dispatch(drawPlayerCard(cards))\n            dispatch(drawPlayerCard(cards))\n\n            // Reset summary\n            dispatch(resetSummary())\n        },\n        playerHit: (cards) => dispatch(drawPlayerCard(cards)),\n        playerStand: (cards, dealerCards) => {\n            dispatch(dealerDrawToSeventeen(cards, dealerCards));\n        }\n    }\n}\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const startGameClick = () => {\n        dispatchProps.startGame(stateProps.cards);\n    }\n\n    const playerHitClick = () => {\n        dispatchProps.playerHit(stateProps.cards);\n    }\n\n    const loadCardsClick = () => {\n        dispatchProps.loadCards(stateProps.cards);\n    }\n\n    const playerStandClick = () => {\n        dispatchProps.playerStand(stateProps.cards, stateProps.dealerCards);\n    }\n\n    return ({\n        ...stateProps,\n        ...dispatchProps,\n        startGameClick,\n        playerHitClick,\n        loadCardsClick,\n        playerStandClick\n    })\n}\n\nconst ControlPanelContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(ControlPanel)\n\nexport default ControlPanelContainer;\n\n","import React, { Component, CSSProperties } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport './SummaryPanel.css';\n\nexport interface SummaryPanelProps {\n    displayStyle: CSSProperties;\n    playerTotal: String;\n    dealerTotal: Number;\n    roundResult: {\n        roundEnd: Boolean,\n        result: String\n    };\n}\n\nconst css = {\n    SummaryPanelBody: 'summary-panel-body',\n    summarySection: 'summary-section'\n};\n\nclass SummaryPanel extends Component<SummaryPanelProps, {}> {\n    render() {\n        const { displayStyle, playerTotal, dealerTotal, roundResult } = this.props;\n        const { roundEnd, result } = roundResult;\n\n        return (\n            <div>\n                <Paper style={displayStyle} className={css.SummaryPanelBody} elevation={3}>\n                    <div className={css.summarySection}>\n                        <p>Dealer has: {dealerTotal}</p>\n                        <p>Player has: {playerTotal}</p>\n                        <p>Winner: <b>{roundEnd ? result : ''}</b></p>\n                    </div>\n                </Paper>\n            </div>\n        );\n    }\n}\n\nexport default SummaryPanel;","import { connect } from 'react-redux';\nimport { GetCardsSum } from '../../../Util/Utils';\nimport SummaryPanel, { SummaryPanelProps } from '../Presentational/SummaryPanel';\nimport AppState from '../../../Interface/State';\n\nconst mapStateToProps = (state: AppState, ownProps: Object): SummaryPanelProps => {\n    const playerSum = GetCardsSum(state.playerCards);\n    const dealerSum = GetCardsSum(state.dealerCards).sum;\n    const playSumResult = playerSum.containAce && playerSum.sum !== 21 ? playerSum.sum - 10 + '/' + playerSum.sum : playerSum.sum;\n\n    return {\n        ...ownProps,\n        displayStyle: state.dealerCards.length === 0 ? { display: 'none' } : { display: 'block' },\n        playerTotal: playSumResult,\n        dealerTotal: dealerSum,\n        roundResult: state.roundResult\n    };\n};\n\nconst summaryPanelContainer = connect(\n    mapStateToProps,\n    undefined\n)(SummaryPanel);\n\nexport default summaryPanelContainer;\n\n","import React, { Component, MouseEventHandler } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Fab from '@material-ui/core/Fab';\nimport './WelcomeDialog.css';\n\ninterface WelcomeDialogProps {\n    open: boolean;\n    onStartGameClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nconst blackJackHelper = 'https://www.bicyclecards.com/how-to-play/blackjack/';\n\nconst css = {\n    dialog: 'dialog',\n    title: 'title',\n    content: 'content',\n    subheader: 'sub-header',\n    howToPlaySection: 'how-to-play-section',\n    startButton: 'start-button'\n};\n\nclass WelcomeDialog extends Component<WelcomeDialogProps, {}> {\n\n    render() {\n        const { open, onStartGameClick } = this.props;\n\n        return (\n            <div>\n                <Dialog\n                    onClose={onStartGameClick}\n                    aria-labelledby='customized-dialog-title'\n                    open={open}\n                    className={css.dialog}\n                >\n                    <DialogTitle className={css.title}>\n                        Welcome to the Blackjack Simulator ♠️\n                    </DialogTitle>\n                    <DialogContent className={css.content}>\n                        <Typography variant='subheading' className={css.subheader} gutterBottom>\n                            How to play:\n                        </Typography>\n                        <Typography gutterBottom>\n                            1: Click 'Next game' to start a new game.\n                        </Typography>\n                        <Typography gutterBottom>\n                            2: Click 'Hit' if you ask for another card.\n                        </Typography>\n                        <Typography gutterBottom>\n                            3: Click 'Stand' if do not want another card.\n                        </Typography>\n                        <Typography gutterBottom>\n                            4: Click 'Reload' to start a new deck.\n                        </Typography>\n                        <Typography variant='subheading' className={css.howToPlaySection} gutterBottom>\n                            For more information: <Link variant='subheading' inline={true} href={blackJackHelper}>How to play BlackJack</Link>\n                        </Typography>\n                    </DialogContent>\n                    <DialogActions className={css.startButton}>\n                        <Fab variant='extended' onClick={onStartGameClick} color='primary' aria-label='Add'>\n                            Start Blackjack! 🃏\n                    </Fab>\n\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default WelcomeDialog;","import React, { Component } from 'react';\nimport BoardBody from './Components/Board/Container/Board';\nimport Store from './Store/Store';\nimport { Provider } from 'react-redux';\nimport Appbar from './Components/Appbar/Appbar';\nimport ControlPanelContainer from './Components/ControlPanel/Container/ControlPanel';\nimport SummaryPanelBody from './Components/SummaryPanel/Container/SummaryPanel';\nimport WelcomeDialog from './Components/WelcomeDialog/WelcomeDialog';\nimport StatisticPanelContainer from './Components/StatisticPanel/Container/StatisticPanel';\nimport './App.css';\n\ninterface AppState {\n    init: boolean;\n}\n\nconst css = {\n    centerPanel: 'center-panel',\n    centerPanelContent: 'center-panel-content'\n};\n\nclass App extends Component<{}, AppState> {\n    state: AppState;\n\n    constructor(props: any) {\n        super(props);\n        this.state = { init: true };\n    }\n\n    startGame = (): void => {\n        this.setState((): AppState => {\n            return { init: false };\n        });\n    }\n\n    render() {\n        const { init } = this.state;\n\n        const blackJackSimulator = (\n            <div className={css.centerPanel}>\n                <div className={css.centerPanelContent}>\n                    <BoardBody></BoardBody>\n                    <SummaryPanelBody></SummaryPanelBody>\n                    <ControlPanelContainer></ControlPanelContainer>\n                </div>\n                <StatisticPanelContainer></StatisticPanelContainer>\n            </div>\n        );\n\n        return (\n            <Provider store={Store}>\n                <div className='App'>\n                    <Appbar></Appbar>\n                    {init ? <WelcomeDialog onStartGameClick={this.startGame} open={init} /> : blackJackSimulator}\n                </div>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}